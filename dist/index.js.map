{
  "version": 3,
  "sources": ["../shape.ts"],
  "sourcesContent": ["function deepEquals(a: any, b: any) {\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n\nfunction deepClone(a: any) {\n  return JSON.parse(JSON.stringify(a));\n}\n\nexport type ScalarShape = {\n  kind: 'scalar';\n  name: 'null' | 'string' | 'number' | 'boolean' | 'bigint';\n};\n\nexport type ObjectShape = {\n  kind: 'object';\n  children: Record<string, Shape>;\n};\n\nexport type ArrayShape = {\n  kind: 'array';\n  children: Shape;\n};\n\nexport type VariedShape = {\n  kind: 'varied';\n  children: Shape[];\n};\n\nexport type Shape =\n  | ArrayShape\n  | ObjectShape\n  | VariedShape\n  | ScalarShape\n  | {\n      kind: 'unknown';\n    };\n\nexport function levelPrefix(level: number) {\n  return [...Array(level * 2).keys()].map((c) => ' ').join('');\n}\n\nexport function toString(shape: Shape, level = 0): string {\n  switch (shape.kind) {\n    case 'scalar':\n      return levelPrefix(level) + shape.name;\n    case 'array':\n      return (\n        levelPrefix(level) + 'Array of\\n' + toString(shape.children, level + 1)\n      );\n    case 'object':\n      return (\n        levelPrefix(level) +\n        ('Object with\\n' +\n          Object.keys(shape.children)\n            .map(\n              (k) =>\n                `${levelPrefix(level + 1)}'${k}' of\\n${toString(\n                  shape.children[k],\n                  level + 2\n                )}`\n            )\n            .join(',\\n'))\n      );\n    case 'varied':\n      return shape.children.map((c) => toString(c, level)).join(' or\\n');\n    case 'unknown':\n      return levelPrefix(level) + 'Unknown';\n  }\n}\n\nfunction variedMerge(a: VariedShape, b: Shape) {\n  for (let child of a.children) {\n    if (deepEquals(child, b)) {\n      return;\n    }\n  }\n\n  a.children.push(b);\n}\n\nfunction objectMerge(a: ObjectShape, b: ObjectShape) {\n  const aKeys = Object.keys(a.children);\n  const bKeys = Object.keys(b.children);\n\n  // First check all aKeys to see if they differ in b\n  for (let i = 0; i < aKeys.length; i++) {\n    const key = aKeys[i];\n    if (bKeys.includes(key)) {\n      if (deepEquals(a.children[key], b.children[key])) {\n        continue;\n      }\n\n      if (a.children[key].kind === b.children[key].kind) {\n        a.children[key] = {\n          kind: 'varied',\n          children: [a.children[key], b.children[key]],\n        };\n        continue;\n      }\n\n      if (a.children[key].kind === 'varied') {\n        variedMerge(a.children[key], b.children[key]);\n        continue;\n      }\n    }\n\n    // TODO: what case is this?\n  }\n\n  // now check all bKeys to see if they are new to a\n  for (let i = 0; i < bKeys.length; i++) {\n    const key = bKeys[i];\n    if (!aKeys.includes(key)) {\n      // If they are new, they must sometimes be null/undefined\n      a.children[key] = {\n        kind: 'varied',\n        children: [b.children[key], { kind: 'scalar', name: 'null' }],\n      };\n    }\n  }\n}\n\nfunction getNRandomUniqueElements(arraySize: number, maxSampleSize: number) {\n  if (!maxSampleSize || arraySize <= maxSampleSize) {\n    return [...Array(arraySize).keys()].map((_, i) => i);\n  }\n\n  const unique = [];\n  while (unique.length < maxSampleSize) {\n    const random = Math.floor(Math.random() * (arraySize - 1)) + 1;\n    if (unique.indexOf(random) === -1) {\n      unique.push(random);\n    }\n  }\n\n  return unique;\n}\n\nfunction merge(shapes: Array<Shape>, sampleSizeMax: number): Shape {\n  const merged: Shape = { kind: 'array', children: { kind: 'unknown' } };\n  if (!shapes.length) {\n    return merged;\n  }\n\n  const randomUniqueIndexes = getNRandomUniqueElements(\n    shapes.length,\n    sampleSizeMax\n  );\n\n  merged.children = shapes[0];\n  for (let i = 0; i < randomUniqueIndexes.length; i++) {\n    const shape = shapes[randomUniqueIndexes[i]];\n\n    if (deepEquals(merged.children, shape)) {\n      continue;\n    }\n\n    if (merged.children.kind === 'unknown') {\n      merged.children = shape;\n      continue;\n    }\n\n    if (merged.children.kind === shape.kind) {\n      if (shape.kind === 'object') {\n        objectMerge(merged.children as ObjectShape, shape as ObjectShape);\n        continue;\n      }\n\n      if (shape.kind === 'array') {\n        // TODO: support this\n        continue;\n      }\n    }\n\n    merged.children = {\n      kind: 'varied',\n      children: [deepClone(merged.children), shape],\n    };\n  }\n\n  return merged;\n}\n\nfunction shapeOfArray(data: any[], sampleSizeMax: number) {\n  const shapes = data.map((d) => shape(d, sampleSizeMax));\n  return merge(shapes, sampleSizeMax);\n}\n\nfunction shapeOfObject(\n  data: Record<string, any>,\n  sampleSizeMax: number\n): Shape {\n  const keys = Object.keys(data);\n\n  const randomUniqueIndexes = getNRandomUniqueElements(\n    keys.length,\n    sampleSizeMax\n  );\n\n  const os: ObjectShape = { kind: 'object', children: {} };\n  for (let i = 0; i < randomUniqueIndexes.length; i++) {\n    const key = keys[randomUniqueIndexes[i]];\n    os.children[key] = shape(data[key], sampleSizeMax);\n  }\n\n  return os;\n}\n\nexport function shape(data: any, sampleSizeMax = 5000): Shape {\n  try {\n    if (Array.isArray(data)) {\n      return shapeOfArray(data as any[], sampleSizeMax);\n    }\n\n    if (data === null) {\n      return { kind: 'scalar', name: 'null' };\n    }\n\n    if (typeof data === 'object') {\n      return shapeOfObject(data, sampleSizeMax);\n    }\n\n    if (typeof data === 'number') {\n      return { kind: 'scalar', name: 'number' };\n    }\n\n    if (typeof data === 'bigint') {\n      return { kind: 'scalar', name: 'bigint' };\n    }\n\n    if (typeof data === 'undefined') {\n      return { kind: 'scalar', name: 'null' };\n    }\n\n    if (typeof data === 'boolean') {\n      return { kind: 'scalar', name: 'boolean' };\n    }\n\n    return { kind: 'scalar', name: 'string' };\n  } catch (e) {\n    console.error(e);\n    return { kind: 'unknown' };\n  }\n}\n"],
  "mappings": "qIAAA,qEAAoB,EAAQ,EAAQ,CAClC,MAAO,MAAK,UAAU,KAAO,KAAK,UAAU,GAG9C,WAAmB,EAAQ,CACzB,MAAO,MAAK,MAAM,KAAK,UAAU,IAgC5B,WAAqB,EAAe,CACzC,MAAO,CAAC,GAAG,MAAM,EAAQ,GAAG,QAAQ,IAAI,AAAC,GAAM,KAAK,KAAK,IAGpD,WAAkB,EAAc,EAAQ,EAAW,CACxD,OAAQ,EAAM,UACP,SACH,MAAO,GAAY,GAAS,EAAM,SAC/B,QACH,MACE,GAAY,GAAS;AAAA,EAAe,EAAS,EAAM,SAAU,EAAQ,OAEpE,SACH,MACE,GAAY,GACX;AAAA,EACC,OAAO,KAAK,EAAM,UACf,IACC,AAAC,GACC,GAAG,EAAY,EAAQ,MAAM;AAAA,EAAU,EACrC,EAAM,SAAS,GACf,EAAQ,MAGb,KAAK;AAAA,QAET,SACH,MAAO,GAAM,SAAS,IAAI,AAAC,GAAM,EAAS,EAAG,IAAQ,KAAK;AAAA,OACvD,UACH,MAAO,GAAY,GAAS,WAIlC,WAAqB,EAAgB,EAAU,CAC7C,OAAS,KAAS,GAAE,SAClB,GAAI,EAAW,EAAO,GACpB,OAIJ,EAAE,SAAS,KAAK,GAGlB,WAAqB,EAAgB,EAAgB,CACnD,GAAM,GAAQ,OAAO,KAAK,EAAE,UACtB,EAAQ,OAAO,KAAK,EAAE,UAG5B,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACrC,GAAM,GAAM,EAAM,GAClB,GAAI,EAAM,SAAS,GAAM,CACvB,GAAI,EAAW,EAAE,SAAS,GAAM,EAAE,SAAS,IACzC,SAGF,GAAI,EAAE,SAAS,GAAK,OAAS,EAAE,SAAS,GAAK,KAAM,CACjD,EAAE,SAAS,GAAO,CAChB,KAAM,SACN,SAAU,CAAC,EAAE,SAAS,GAAM,EAAE,SAAS,KAEzC,SAGF,GAAI,EAAE,SAAS,GAAK,OAAS,SAAU,CACrC,EAAY,EAAE,SAAS,GAAM,EAAE,SAAS,IACxC,WAQN,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACrC,GAAM,GAAM,EAAM,GAClB,AAAK,EAAM,SAAS,IAElB,GAAE,SAAS,GAAO,CAChB,KAAM,SACN,SAAU,CAAC,EAAE,SAAS,GAAM,CAAE,KAAM,SAAU,KAAM,YAM5D,WAAkC,EAAmB,EAAuB,CAC1E,GAAI,CAAC,GAAiB,GAAa,EACjC,MAAO,CAAC,GAAG,MAAM,GAAW,QAAQ,IAAI,CAAC,EAAG,IAAM,GAGpD,GAAM,GAAS,GACf,KAAO,EAAO,OAAS,GAAe,CACpC,GAAM,GAAS,KAAK,MAAM,KAAK,SAAY,GAAY,IAAM,EAC7D,AAAI,EAAO,QAAQ,KAAY,IAC7B,EAAO,KAAK,GAIhB,MAAO,GAGT,WAAe,EAAsB,EAA8B,CACjE,GAAM,GAAgB,CAAE,KAAM,QAAS,SAAU,CAAE,KAAM,YACzD,GAAI,CAAC,EAAO,OACV,MAAO,GAGT,GAAM,GAAsB,EAC1B,EAAO,OACP,GAGF,EAAO,SAAW,EAAO,GACzB,OAAS,GAAI,EAAG,EAAI,EAAoB,OAAQ,IAAK,CACnD,GAAM,GAAQ,EAAO,EAAoB,IAEzC,GAAI,GAAW,EAAO,SAAU,GAIhC,IAAI,EAAO,SAAS,OAAS,UAAW,CACtC,EAAO,SAAW,EAClB,SAGF,GAAI,EAAO,SAAS,OAAS,EAAM,KAAM,CACvC,GAAI,EAAM,OAAS,SAAU,CAC3B,EAAY,EAAO,SAAyB,GAC5C,SAGF,GAAI,EAAM,OAAS,QAEjB,SAIJ,EAAO,SAAW,CAChB,KAAM,SACN,SAAU,CAAC,EAAU,EAAO,UAAW,KAI3C,MAAO,GAGT,WAAsB,EAAa,EAAuB,CACxD,GAAM,GAAS,EAAK,IAAI,AAAC,GAAM,EAAM,EAAG,IACxC,MAAO,GAAM,EAAQ,GAGvB,WACE,EACA,EACO,CACP,GAAM,GAAO,OAAO,KAAK,GAEnB,EAAsB,EAC1B,EAAK,OACL,GAGI,EAAkB,CAAE,KAAM,SAAU,SAAU,IACpD,OAAS,GAAI,EAAG,EAAI,EAAoB,OAAQ,IAAK,CACnD,GAAM,GAAM,EAAK,EAAoB,IACrC,EAAG,SAAS,GAAO,EAAM,EAAK,GAAM,GAGtC,MAAO,GAGF,WAAe,EAAW,EAAgB,IAAa,CAC5D,GAAI,CACF,MAAI,OAAM,QAAQ,GACT,EAAa,EAAe,GAGjC,IAAS,KACJ,CAAE,KAAM,SAAU,KAAM,QAG7B,MAAO,IAAS,SACX,EAAc,EAAM,GAGzB,MAAO,IAAS,SACX,CAAE,KAAM,SAAU,KAAM,UAG7B,MAAO,IAAS,SACX,CAAE,KAAM,SAAU,KAAM,UAG7B,MAAO,IAAS,YACX,CAAE,KAAM,SAAU,KAAM,QAG7B,MAAO,IAAS,UACX,CAAE,KAAM,SAAU,KAAM,WAG1B,CAAE,KAAM,SAAU,KAAM,gBACxB,EAAP,CACA,eAAQ,MAAM,GACP,CAAE,KAAM",
  "names": []
}
